

url --- https://numpy.org/devdocs/user/absolute_beginners.html

######### NUMPY #########

The rank of the array is the number of dimensions.

The NumPy library contains multidimensional array and matrix data structures.
It provides ndarray, a homogeneous n-dimensional array object, with methods to efficiently operate on it.
NumPy can be used to perform a wide variety of mathematical operations on arrays

1) To install 
	pip install numpy
	
2) then import numpy
	import numpy as np
	
3) Difference between python list and numpy
	NumPy gives you an enormous range of fast and efficient ways of creating arrays and manipulating numerical data inside them.
	While a Python list can contain different data types within a single list, all of the elements in a NumPy array should be homogeneous.
	
4)
	np.array([1, 2, 3])
	output: 
		array([1,2,3])
		
	you can easily create an array filled with 0’s:
	
		np.zeros(2)
		output: 
			array([0., 0.])
			
	an array filled with 1’s
	
		np.ones(2)
		output:
			array([1., 1.])
		
	even an empty array! The function empty creates an array whose initial content is random and depends on the state of the memory.
	
		# Create an empty array with 2 elements
		np.empty(2) 
		output:
			array([3.14, 42.  ])  # may vary


	range of elements
	
		np.arange(4)
		output:
			array([0, 1, 2, 3])
		
	array that contains a range of evenly spaced intervals. To do this, you will specify the FIRST NUMBER, LAST NUMBER, AND THE STEP SIZE
	
		np.arange(2, 9, 2)
		output:
			array([2, 4, 6, 8])
			
	np.linspace() to create an array with values that are spaced linearly in a specified interval:
	
		np.linspace(0, 10, num=5)
		output:
			array([ 0. ,  2.5,  5. ,  7.5, 10. ])
			
			
	While the default data type is floating point (np.float64),
	you can explicitly specify which data type you want using the dtype keyword.
	
		np.ones(2, dtype=np.int64)
		output:
			array([1, 1])
			
			
	sorting an arrays
		
		arr = np.array([2, 1, 5, 3, 7, 4, 6, 8])
		np.sort(arr)
		output:
			array([1, 2, 3, 4, 5, 6, 7, 8])
			
			
5)	here ndarray is your array

	ndarray.ndim ---- will tell you the number of axes, or dimensions, of the array.
	ndarray.size ---- will tell you the total number of elements of the array.
	ndarray.size ---- will tell you the total number of elements of the array
	
	
6) a = np.arange(6)
   print(a)
   output:
	[0,1,2,3,4,5]
   b = a.reshape(3, 2)
   print(b)
   output:
	[[0 1]
	 [2 3]
	 [4 5]]
	 
	 
	 
7)  Slicing

data = np.array([1, 2, 3])

	data[1]
	output:
		2
		
	data[0:2]
	output:
		array([1, 2])
		
	data[1:]
	output:
		array([2, 3])
		
	data[-2:]
	output:
		array([2, 3])
		
		
8)  a = np.array([[1 , 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])
	print(a[a < 5])
	[1 2 3 4]
	
	five_up = (a >= 5)
	print(a[five_up])
	[ 5  6  7  8  9 10 11 12]
	
	c = a[(a > 2) & (a < 11)]
	print(c)
	[ 3  4  5  6  7  8  9 10
	
	
9) Sum operator:

	a = np.array([1, 2, 3, 4])
    a.sum()
	output:
		10
	
	b = np.array([[1, 1], [2, 2]])
		b.sum(axis=0) #sum over row if axis=1 then it would be sum over column(IMP)
		output:
			array([3, 3])
		b.sum(axis=1)
		output:
			array([2, 4])
			

10) data = np.array([1.0, 2.0])

		data.max()
		output:
			2.0
			
		data.min()
		output:
			1.0
			
		data.sum()
		output:
			3.0
			
		data.min(axis=0) # find the minimum value within each column by specifying axis=0
		
11) data
	output:
		array([[1, 2],
		   [3, 4],
		   [5, 6]])

	data[0, 1]
	output:
		2
		
	data[1:3]  ### The [1:3] indexing operator tells Python to extract elements from the data array starting from the 2nd element (index 1) and ending at the 3rd element (index 2).
				###In this case, the code extracts the second and third rows of the data array, which are [3, 4] and [5, 6]
	output:	
		array([[3, 4],
			   [5, 6]])
			   
	data[0:2, 0]
	output:
		array([1, 3])
		
		
12)

	np.ones((4, 3, 2))
	output:
		array([[[1., 1.],
				[1., 1.],
				[1., 1.]],

			   [[1., 1.],
				[1., 1.],
				[1., 1.]],

			   [[1., 1.],
				[1., 1.],
				[1., 1.]],

			   [[1., 1.],
				[1., 1.],
				[1., 1.]]])
				
				
13) np.unique(arr) --- to print unique values	

	example:
		a = np.array([11, 11, 12, 13, 14, 15, 16, 17, 12, 13, 11, 14, 18, 19, 20])
		unique_values = np.unique(a)
		print(unique_values)
		[11 12 13 14 15 16 17 18 19 20]
				
		
14) arr.T ---- for transpose if the matrix

15) np.flip(arr) --- reverse the matrix	

	example
		reversed_arr = np.flip(arr_2d)
		print(reversed_arr)
		[[12 11 10  9]
		 [ 8  7  6  5]
		 [ 4  3  2  1]]

16) np.flip(arr,axis=0) ---   reverse only the rows similararly with axix=1 fo each column

	example: 
		reversed_arr_rows = np.flip(arr_2d, axis=0)
		print(reversed_arr_rows)
		[[ 9 10 11 12]
		 [ 5  6  7  8]
		 [ 1  2  3  4]]

17) arr.flatten() --- to flatten your matrix into a 1D array
	
	example: 	
		x = np.array([[1 , 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])
		x.flatten()
		array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12])
		
13 arr.ravel() --- similar to flatten but the changes you make to the new array
					will affect the parent array.
					
					
14 to save and load numpy objects

	a = np.array([1, 2, 3, 4, 5, 6])
	--- easy to save and load and array with np.save() ---
	np.save('filename', a)
	--- can use np.load() to reconstruct your array --- 
	b = np.load('filename.npy')
	print(b)
	output:
		[1 2 3 4 5 6]
		
		
	--- you can save a NumPy array as a plain text file like a .csv or .txt file with np.savetxt. ---
	
	csv_arr = np.array([1, 2, 3, 4, 5, 6, 7, 8])
	--- can easily save it as a .csv file with the name “new_file.csv” like this ---
	np.savetxt('new_file.csv', csv_arr)
	---  quickly and easily load your saved text file using loadtxt() ---
	np.loadtxt('new_file.csv')
	output: 
		array([1., 2., 3., 4., 5., 6., 7., 8.])
		
		
	
	
	
	
	
